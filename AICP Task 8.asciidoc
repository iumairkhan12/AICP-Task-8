+*In[ ]:*+
[source, ipython3]
----
# Constants
BOAT_COUNT = 10
HOURLY_RATE = 20
HALF_HOUR_RATE = 12
OPENING_TIME = 10
CLOSING_TIME = 17

# Function to calculate the money taken in a day for one boat
def calculate_daily_profit_for_one_boat():
    total_money_taken = 0
    total_hours_hired = 0
    boat_schedule = {}

    for boat_num in range(1, BOAT_COUNT + 1):
        print(f"\nBoat {boat_num}:")
        try:
            start_time = float(input("Enter the start time (10.0 to 17.0): "))
            if not (OPENING_TIME <= start_time <= CLOSING_TIME):
                print("Error: Boats can only be hired between 10:00 and 17:00.")
                continue

            duration = float(input("Enter the duration in hours (0.5 for half an hour, 1.0 for one hour): "))
            if not (duration == 0.5 or duration == 1.0):
                print("Error: Invalid duration. Choose 0.5 for half an hour or 1.0 for one hour.")
                continue

        except ValueError:
            print("Error: Invalid input. Please enter valid numbers.")
            continue

        end_time = start_time + duration
        if end_time > CLOSING_TIME:
            print("Error: Boats cannot be returned after 17:00.")
            continue

        money_taken = calculate_money_taken(duration)
        total_money_taken += money_taken
        total_hours_hired += duration
        boat_schedule[boat_num] = (start_time, end_time)

    print("\nEnd of the day report:")
    print(f"Total money taken: ${total_money_taken:.2f}")
    print(f"Total hours hired: {total_hours_hired:.1f} hours")

    return boat_schedule


# Function to find the next boat available
def find_next_available_boat(boat_schedule):
    current_time = float(input("Enter the current time: "))

    available_boats = [boat for boat, schedule in boat_schedule.items() if schedule[1] <= current_time]

    if not available_boats:
        earliest_return_time = min(schedule[1] for schedule in boat_schedule.values())
        print(f"No boats available now. Earliest available time is {earliest_return_time:.1f}")
    else:
        print(f"Available boats: {available_boats}")


# Function to calculate the money taken for all the boats at the end of the day
def calculate_total_money_and_most_used_boat(boat_schedule):
    total_money_taken = 0
    total_hours_hired = 0
    unused_boats = []
    most_used_boat = None
    max_hours_hired = 0

    for boat, schedule in boat_schedule.items():
        start_time, end_time = schedule
        money_taken = calculate_money_taken(end_time - start_time)
        total_money_taken += money_taken
        total_hours_hired += (end_time - start_time)

        if end_time == CLOSING_TIME:
            unused_boats.append(boat)

        if end_time - start_time > max_hours_hired:
            max_hours_hired = end_time - start_time
            most_used_boat = boat

    print("\nEnd of the day report:")
    print(f"Total money taken: ${total_money_taken:.2f}")
    print(f"Total hours hired: {total_hours_hired:.1f} hours")
    print(f"Unused boats: {unused_boats}")
    print(f"Boat {most_used_boat} was used the most with {max_hours_hired:.1f} hours.")


# Helper function to calculate money taken based on duration
def calculate_money_taken(duration):
    if duration == 0.5:
        return HALF_HOUR_RATE
    else:
        return HOURLY_RATE


# Main program
boat_schedule = calculate_daily_profit_for_one_boat()
find_next_available_boat(boat_schedule)
calculate_total_money_and_most_used_boat(boat_schedule)

----


+*Out[ ]:*+
----

Boat 1:
Enter the start time (10.0 to 17.0): 12
Enter the duration in hours (0.5 for half an hour, 1.0 for one hour): 1

Boat 2:
Enter the start time (10.0 to 17.0): 15
Enter the duration in hours (0.5 for half an hour, 1.0 for one hour): 0.1
Error: Invalid duration. Choose 0.5 for half an hour or 1.0 for one hour.

Boat 3:
Enter the start time (10.0 to 17.0): 5
Error: Boats can only be hired between 10:00 and 17:00.

Boat 4:
Enter the start time (10.0 to 17.0): 12
Enter the duration in hours (0.5 for half an hour, 1.0 for one hour): 0.2
Error: Invalid duration. Choose 0.5 for half an hour or 1.0 for one hour.

Boat 5:
----


+*In[ ]:*+
[source, ipython3]
----

----
